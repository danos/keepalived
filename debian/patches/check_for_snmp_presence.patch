---
 keepalived/core/snmp.c      |   39 ++++++++++++++++++++++++++++++++++++++-
 keepalived/include/snmp.h   |    9 +++++++++
 keepalived/vrrp/vrrp_snmp.c |    7 ++++++-
 3 files changed, 53 insertions(+), 2 deletions(-)

--- a/keepalived/core/snmp.c
+++ b/keepalived/core/snmp.c
@@ -27,6 +27,8 @@
 #include "config.h"
 #include "global_data.h"
 #include "main.h"
+#include "scheduler.h"
+#include "timer.h"
 
 #include <net-snmp/agent/agent_sysORTable.h>
 
@@ -271,6 +273,41 @@
 	unregister_sysORTable(myoid, len);
 }
 
+/*
+ * Before starting our SNMP agent we should check that the SNMP master Agent is
+ * active. Unfortunately this is quite difficult. Net-snmp doesn't provide a
+ * clear way for an agent to know if SNMPd is running and can be connected to.
+ * This is a best guess attempt to only try and connect once the SNMPd pid file
+ * exists, this should mean it's running. I haven't found a way to check if
+ * we're connected so there may still be problems. This should solve the problem
+ * where keepalived doesn't connect to SNMP after a reboot.
+ */
+int
+snmp_check_for_daemon(thread_t * thread)
+{
+	log_message(LOG_DEBUG, "Checking if SNMPd is running");
+	snmp_args_t * args;
+	args = THREAD_ARG(thread);
+	if (access("/var/run/snmpd.pid", F_OK) != 0) {
+		timeval_t now = timer_now();
+		log_message(LOG_DEBUG, "SNMPd is not running, creating timer thread to "
+					"check in %d seconds.", (1<<args->retries));
+		/* Check for the file presence using an exponential backoff algorithm. */
+		thread_add_timer(thread->master, snmp_check_for_daemon, args,
+			(1<<args->retries)*TIMER_HZ);
+		/* SNMP_RETRY_CEILING defined in include/snmp.h, set to 8 */
+		if (args->retries < SNMP_RETRY_CEILING) {
+			args->retries++;
+		}
+		return -1;
+	}
+	/* Assume SNMPd is running when the pid file exists. */
+	log_message(LOG_DEBUG, "SNMPD is running");
+	snmp_agent_init(args->socket, args->base_mib);
+	free((void *)args);
+	return 0;
+}
+
 void
 snmp_agent_init(const char *snmp_socket, bool base_mib)
 {
@@ -287,7 +324,7 @@
 	netsnmp_ds_set_boolean(NETSNMP_DS_LIBRARY_ID,
 	    NETSNMP_DS_LIB_DONT_PERSIST_STATE, TRUE);
 	/* Do not log connection errors (may need to be removed for debugging */
-        netsnmp_ds_set_boolean(NETSNMP_DS_APPLICATION_ID,
+    netsnmp_ds_set_boolean(NETSNMP_DS_APPLICATION_ID,
 	    NETSNMP_DS_AGENT_NO_CONNECTION_WARNINGS, TRUE);
 	/* Do not load any MIB */
 	setenv("MIBS", "", 1);
--- a/keepalived/include/snmp.h
+++ b/keepalived/include/snmp.h
@@ -43,18 +43,26 @@
 
 #include "list.h"
 #include "utils.h"
+#include "scheduler.h"
 
 #define SNMP_DEFAULT_NETWORK_SOCKET	"udp:localhost:705"
 
 #define KEEPALIVED_OID 1, 3, 6, 1, 4, 1, 9586, 100, 5
 #define SNMPTRAP_OID 1, 3, 6, 1, 6, 3, 1, 1, 4, 1, 0
 #define GLOBAL_OID {KEEPALIVED_OID, 1}
+#define SNMP_RETRY_CEILING 8
 
 typedef union _long_ret {
 	unsigned long u;
 	long s;
 } longret_t;
 
+typedef struct _snmp_args {
+	const char * socket;
+	bool base_mib;
+	int retries;
+} snmp_args_t;
+
 extern unsigned long snmp_scope(int scope);
 extern void* snmp_header_list_table(struct variable *vp, oid *name, size_t *length,
 				    int exact, size_t *var_len, WriteMethod **write_method,
@@ -65,5 +73,6 @@
 			      size_t varsize, size_t varlen);
 extern void snmp_unregister_mib(oid *myoid, size_t len);
 extern void snmp_agent_close(bool base_mib);
+extern int snmp_check_for_daemon(thread_t *);
 
 #endif
--- a/keepalived/vrrp/vrrp_snmp.c
+++ b/keepalived/vrrp/vrrp_snmp.c
@@ -3878,7 +3878,12 @@
 vrrp_snmp_agent_init(const char *snmp_socket)
 {
 	/* We let the check process handle the global OID if it is running and with snmp */
-	snmp_agent_init(snmp_socket, vrrp_handles_global_oid());
+	snmp_args_t * snmp_args = (snmp_args_t *)malloc(sizeof(snmp_args_t));
+	snmp_args->socket = snmp_socket;
+	snmp_args->base_mib = vrrp_handles_global_oid();
+	snmp_args->retries = 0;
+	thread_add_event(master, snmp_check_for_daemon, (void *)snmp_args, 0);
+	log_message(LOG_INFO, "Check SNMP presence event added to scheduler.");
 
 #ifdef _WITH_SNMP_KEEPALIVED_
 	if (global_data->enable_snmp_keepalived)
