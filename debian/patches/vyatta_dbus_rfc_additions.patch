 keepalived/dbus/org.keepalived.Vrrp1.Instance.xml      |    4 
 keepalived/dbus/org.keepalived.Vrrp1.Vrrp.xml_template |    5 +
 keepalived/vrrp/vrrp_dbus.c                            |   78 ++++++++++++++++-
 3 files changed, 86 insertions(+), 1 deletion(-)

--- a/keepalived/dbus/org.keepalived.Vrrp1.Instance.xml
+++ b/keepalived/dbus/org.keepalived.Vrrp1.Instance.xml
@@ -27,5 +27,9 @@
 	</signal>
 	<property type='s' name='Name' access='read' />
 	<property type='(us)' name='State' access='read' />
+	<property type='s' name='XmitIntf' access='read' />
+	<property type='b' name='AddressOwner' access='read' />
+	<property type='u' name='LastTransition' access='read' />
+	<property type='s' name='SyncGroup' access='read' />
   </interface>
 </node>
--- a/keepalived/vrrp/vrrp_dbus.c
+++ b/keepalived/vrrp/vrrp_dbus.c
@@ -66,6 +66,7 @@
 #include "vrrp_dbus.h"
 #include "vrrp_data.h"
 #include "vrrp_print.h"
+#include "vrrp_sync.h"
 #include "global_data.h"
 #include "main.h"
 #include "logger.h"
@@ -80,6 +81,7 @@ typedef enum dbus_action {
 	DBUS_PRINT_STATS,
 	DBUS_PRINT_STATS_CLEAR,
 	DBUS_RELOAD,
+	DBUS_GET_RFC_MAPPING,
 #ifdef _WITH_DBUS_CREATE_INSTANCE_
 	DBUS_CREATE_INSTANCE,
 	DBUS_DESTROY_INSTANCE,
@@ -87,6 +89,10 @@ typedef enum dbus_action {
 	DBUS_SEND_GARP,
 	DBUS_GET_NAME,
 	DBUS_GET_STATUS,
+	DBUS_GET_XMIT,
+	DBUS_GET_IPAO,
+	DBUS_GET_LAST_TRANSITION,
+	DBUS_GET_SYNC_GROUP
 } dbus_action_t;
 
 typedef enum dbus_error {
@@ -209,6 +215,21 @@ get_vrrp_instance(const char *ifname, in
 	return NULL;
 }
 
+static vrrp_t *
+get_vrrp_instance_from_xmit_intf(const char *ifname)
+{
+	vrrp_t *vrrp;
+
+	list_for_each_entry(vrrp, &vrrp_data->vrrp, e_list) {
+		log_message(LOG_DEBUG, "Configured interface: %s, Actual interface: %s", VRRP_CONFIGURED_IFP(vrrp)->ifname, vrrp->ifp->ifname);
+		if (!valid_path_cmp(VRRP_CONFIGURED_IFP(vrrp)->ifname, ifname) &&
+				valid_path_cmp(vrrp->ifp->ifname, ifname))
+			return vrrp;
+	}
+
+	return NULL;
+}
+
 static gboolean
 unregister_object(const void * const key, gpointer value, __attribute__((unused)) gpointer user_data)
 {
@@ -350,6 +371,14 @@ handle_get_property(__attribute__((unuse
 		action = DBUS_GET_NAME;
 	else if (!g_strcmp0(property_name, "State"))
 		action = DBUS_GET_STATUS;
+	else if (!g_strcmp0(property_name, "XmitIntf"))
+		action = DBUS_GET_XMIT;
+	else if (!g_strcmp0(property_name, "AddressOwner"))
+		action = DBUS_GET_IPAO;
+	else if (!g_strcmp0(property_name, "LastTransition"))
+		action = DBUS_GET_LAST_TRANSITION;
+	else if (!g_strcmp0(property_name, "SyncGroup"))
+		action = DBUS_GET_SYNC_GROUP;
 	else {
 		log_message(LOG_INFO, "Property %s does not exist", property_name);
 		return NULL;
@@ -389,6 +418,7 @@ handle_method_call(__attribute__((unused
 	size_t len;
 	unsigned family;
 #endif
+	char *xmit;
 	dbus_queue_ent_t ent;
 	char ifname_str[sizeof (PTR_CAST(vrrp_t, NULL))->ifp->ifname];
 
@@ -412,6 +442,13 @@ handle_method_call(__attribute__((unused
 			g_dbus_method_invocation_return_value(invocation, NULL);
 			kill(getppid(), SIGHUP);
 		}
+		else if (g_strcmp0(method_name, "GetRfcMapping") == 0) {
+			ent.action = DBUS_GET_RFC_MAPPING;
+			g_variant_get(parameters, "(s)", &xmit);
+			ent.args = g_variant_new("(s)", xmit);
+			process_method_call(&ent);
+			g_dbus_method_invocation_return_value(invocation, ent.args);
+		}
 #ifdef _WITH_DBUS_CREATE_INSTANCE_
 		else if (g_strcmp0(method_name, "CreateInstance") == 0) {
 			g_variant_get(parameters, "(ssuu)", &iname, &ifname, &ent.vrid, &family);
@@ -772,6 +809,7 @@ handle_dbus_msg(__attribute__((unused))
 {
 	dbus_queue_ent_t *ent;
 	char recv_buf;
+	gchar *xmit_intf;
 	vrrp_t *vrrp;
 #ifdef _WITH_DBUS_CREATE_INSTANCE_
 	gchar *name;
@@ -796,6 +834,29 @@ handle_dbus_msg(__attribute__((unused))
 			log_message(LOG_INFO, "Printing and clearing VRRP stats on DBus request");
 			vrrp_print_stats(true);
 		}
+		else if (ent->action == DBUS_GET_RFC_MAPPING) {
+			g_variant_get(ent->args, "(s)", &xmit_intf);
+			log_message(LOG_INFO, "Finding Receive interface for interface %s",
+						xmit_intf);
+			vrrp = get_vrrp_instance_from_xmit_intf(xmit_intf);
+			if (NULL != vrrp) {
+				log_message(LOG_INFO, "Found Receive interface %s for Transmit interface %s",
+							vrrp->ifp->ifname, xmit_intf);
+				ent->args = g_variant_new("(sy)",
+								vrrp->ifp->ifname,
+								vrrp->vrid
+								);
+				ent->reply = DBUS_SUCCESS;
+			} else {
+				log_message(LOG_INFO, "%s is not an RFC interface",
+							xmit_intf);
+				ent->reply = DBUS_SUCCESS;
+				ent->args = g_variant_new("(sy)",
+								"",
+								0
+								);
+			}
+		}
 #ifdef _WITH_DBUS_CREATE_INSTANCE_
 		else if (ent->action == DBUS_CREATE_INSTANCE) {
 			g_variant_get(ent->args, "(s)", &name);
@@ -817,7 +878,11 @@ handle_dbus_msg(__attribute__((unused))
 			}
 		}
 		else if (ent->action == DBUS_GET_NAME ||
-			 ent->action == DBUS_GET_STATUS) {
+			 ent->action == DBUS_GET_STATUS ||
+			 ent->action == DBUS_GET_XMIT ||
+			 ent->action == DBUS_GET_IPAO ||
+			 ent->action == DBUS_GET_LAST_TRANSITION ||
+			 ent->action == DBUS_GET_SYNC_GROUP) {
 			/* we look for the vrrp instance object that corresponds to our interface and group */
 			ent->reply = DBUS_INTERFACE_NOT_FOUND;
 
@@ -829,6 +894,17 @@ handle_dbus_msg(__attribute__((unused))
 					ent->args = g_variant_new("(s)", vrrp->iname);
 				else if (ent->action == DBUS_GET_STATUS)
 					ent->args = g_variant_new("(us)", vrrp->state, state_str(vrrp->state));
+				else if (ent->action == DBUS_GET_XMIT)
+					ent->args = g_variant_new("(s)", vrrp->configured_ifp->ifname);
+				else if (ent->action == DBUS_GET_IPAO)
+					ent->args = g_variant_new("(b)", false); // restore with dynamic IPAO patch vrrp->addr_owner);
+				else if (ent->action == DBUS_GET_LAST_TRANSITION)
+					ent->args = g_variant_new("(u)", vrrp->last_transition.tv_sec);
+				else if (ent->action == DBUS_GET_SYNC_GROUP)
+					if (vrrp->sync != NULL)
+						ent->args = g_variant_new("(s)", GROUP_NAME(vrrp->sync));
+					else
+						ent->args = g_variant_new("(s)", "");
 				else
 					ent->args = NULL;	 /* How did we get here? */
 				ent->reply = DBUS_SUCCESS;
--- a/keepalived/dbus/org.keepalived.Vrrp1.Vrrp.xml_template
+++ b/keepalived/dbus/org.keepalived.Vrrp1.Vrrp.xml_template
@@ -40,6 +40,11 @@
 	-->
 	<method name='ReloadConfig'>
 	</method>
+	<method name="GetRfcMapping">
+		<arg name="xmit" type="s" direction="in"/>
+		<arg name="recv" type="s" direction="out" />
+		<arg name="vrid" type="y" direction="out" />
+	</method>
 C		<!--
 C		  CreateInstance:
 C		  @iname: unique name for the new instance.
