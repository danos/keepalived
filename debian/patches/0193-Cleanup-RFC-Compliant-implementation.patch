---
 keepalived/include/vrrp.h        |    5 +--
 keepalived/include/vrrp_data.h   |    2 +
 keepalived/include/vrrp_vmac.h   |    3 +
 keepalived/vrrp/vrrp.c           |   62 +++++++++++++++++++++++++++++++++++----
 keepalived/vrrp/vrrp_data.c      |    7 ++--
 keepalived/vrrp/vrrp_parser.c    |    2 +
 keepalived/vrrp/vrrp_print.c     |   12 ++++++-
 keepalived/vrrp/vrrp_scheduler.c |   50 ++++++++++++++++++++++++-------
 keepalived/vrrp/vrrp_vmac.c      |   38 ++++++++++++++++++++---
 9 files changed, 152 insertions(+), 29 deletions(-)

--- a/keepalived/include/vrrp.h
+++ b/keepalived/include/vrrp.h
@@ -151,7 +151,8 @@
 	char			*iname;			/* Instance Name */
 	vrrp_sgroup_t		*sync;			/* Sync group we belong to */
 	vrrp_stats		*stats;			/* Statistics */
-	interface_t		*ifp;			/* Interface we belong to */
+	interface_t		*ifp;			/* Interface on which we receive traffic */
+	interface_t		*xmit_ifp;		/* Interface on which we transmit traffic */
 	bool			dont_track_primary;	/* If set ignores ifp faults */
 	bool			skip_check_adv_addr;	/* If set, don't check the VIPs in subsequent
 							 * adverts from the same master */
@@ -159,7 +160,7 @@
 #ifdef _HAVE_VRRP_VMAC_
 	unsigned long		vmac_flags;		/* VRRP VMAC flags */
 	char			vmac_ifname[IFNAMSIZ];	/* Name of VRRP VMAC interface */
-	ifindex_t		vmac_ifindex;		/* ifindex of vmac interface */
+	ifindex_t		vmac_ifindex;		/* ifindex of vmac interface used upon deletion*/
 #endif
 	list			track_ifp;		/* Interface state we monitor */
 	list			track_script;		/* Script state we monitor */
--- a/keepalived/include/vrrp_data.h
+++ b/keepalived/include/vrrp_data.h
@@ -47,6 +47,8 @@
 	struct sockaddr_storage	saddr;
 	int			proto;
 	ifindex_t		ifindex;
+        ifindex_t               recv_ifindex; /* ifindex of in_fd */
+        ifindex_t               xmit_ifindex; /* ifindex of out_fd */
 	bool			unicast;
 	int			fd_in;
 	int			fd_out;
--- a/keepalived/include/vrrp_vmac.h
+++ b/keepalived/include/vrrp_vmac.h
@@ -48,5 +48,6 @@
 /* prototypes */
 extern int netlink_link_add_vmac(vrrp_t *);
 extern int netlink_link_del_vmac(vrrp_t *);
-
+extern int netlink_link_down(vrrp_t *);
+extern int netlink_link_up(vrrp_t *);
 #endif
--- a/keepalived/vrrp/vrrp.c
+++ b/keepalived/vrrp/vrrp.c
@@ -1189,7 +1189,11 @@
 static void
 vrrp_state_become_master(vrrp_t * vrrp)
 {
-	interface_t *ifp ;
+        if (__test_bit(VRRP_VMAC_BIT, &vrrp->vmac_flags)) {
+            netlink_link_up(vrrp);
+        }
+
+        interface_t *ifp ;
 
 	++vrrp->stats->become_master;
 
@@ -1326,6 +1330,11 @@
 		vrrp_handle_accept_mode(vrrp, IPADDRESS_DEL, force);
 		vrrp->vipset = 0;
 	}
+
+#ifdef _HAVE_VRRP_VMAC_
+	if (__test_bit(VRRP_VMAC_BIT, &vrrp->vmac_flags) && __test_bit(VRRP_VMAC_UP_BIT, &vrrp->vmac_flags))
+		netlink_link_down(vrrp);
+#endif
 }
 
 void
@@ -1449,8 +1458,19 @@
 			}
 		}
 	} else {
+		log_message(LOG_INFO, "VRRP_Instance(%s) received a lower priority "
+						"advertisement. %d from packet against %d effective locally."
+						, vrrp->iname, hd->priority, vrrp->effective_priority);
 		log_message(LOG_INFO, "VRRP_Instance(%s) forcing a new MASTER election" , vrrp->iname);
 		vrrp->wantstate = VRRP_STATE_GOTO_MASTER;
+		/*
+		 * Our rfc code tries to send an advertisement out of an interface that
+		 * isn't active. Even without RFC mode we should come up as master.
+		 * As we can preempt this packet we've received we should go into the
+		 * Master state.
+		 */
+		vrrp_state_goto_master(vrrp);
+		vrrp_state_become_master(vrrp);
 		vrrp_send_adv(vrrp, vrrp->effective_priority);
 #ifdef _WITH_SNMP_RFCV3_
 		vrrp->stats->master_reason = VRRPV3_MASTER_REASON_PREEMPTED;
@@ -1798,7 +1818,8 @@
 									    IF_INDEX(vrrp->ifp);
 	unicast = !LIST_ISEMPTY(vrrp->unicast_peer);
 	vrrp->fd_in = open_vrrp_read_socket(vrrp->family, proto, ifindex, unicast);
-	vrrp->fd_out = open_vrrp_send_socket(vrrp->family, proto, ifindex, unicast);
+	vrrp->fd_out = open_vrrp_send_socket(vrrp->family, proto,
+		IF_INDEX(vrrp->xmit_ifp), unicast);
 	alloc_vrrp_fd_bucket(vrrp);
 
 	/* Sync the other desc */
@@ -2095,7 +2116,8 @@
 					}
 					else
 						strcpy(vrrp->vmac_ifname, ifp->ifname);
-					vrrp->ifp = ifp;
+					if (!__test_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags))
+						vrrp->ifp = ifp;
 					vrrp->vmac_ifindex = ifp->ifindex;
 					__set_bit(VRRP_VMAC_UP_BIT, &vrrp->vmac_flags);
 
@@ -2237,8 +2259,13 @@
 		for (e = LIST_HEAD(vrrp->vip); e; ELEMENT_NEXT(e)) {
 			vip = ELEMENT_DATA(e);
 			if (!vip->ifa.ifa_index) {
-				vip->ifa.ifa_index = vrrp->ifp->ifindex;
-				vip->ifp = vrrp->ifp;
+				if (__test_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags)){
+					vip->ifa.ifa_index = vrrp->xmit_ifp->ifindex;
+					vip->ifp = vrrp->xmit_ifp;
+				} else {
+					vip->ifa.ifa_index = vrrp->ifp->ifindex;
+					vip->ifp = vrrp->ifp;
+				}
 			}
 		}
 	}
@@ -2606,6 +2633,27 @@
 	}
 }
 
+static void
+update_vip_pointers(vrrp_t * vrrp) {
+	element e;
+	list l = vrrp->vip;
+	ip_address_t *vip;
+	for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {
+		vip = ELEMENT_DATA(e);
+#ifdef _HAVE_VRRP_VMAC_
+		if (__test_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags)) {
+			vip->ifa.ifa_index = vrrp->xmit_ifp->ifindex;
+			vip->ifp = vrrp->xmit_ifp;
+		} else {
+#endif
+			vip->ifa.ifa_index = vrrp->ifp->ifindex;
+			vip->ifp = vrrp->ifp;
+#ifdef _HAVE_VRRP_VMAC_
+		}
+#endif
+	}
+}
+
 /* Diff when reloading configuration */
 void
 clear_diff_vrrp(void)
@@ -2655,6 +2703,9 @@
 #endif
 
 #ifdef _HAVE_VRRP_VMAC_
+ 			if (__test_bit(VRRP_VMAC_BIT, &vrrp->vmac_flags)) {
+				netlink_link_up(vrrp);
+			}
 			/*
 			 * Remove VMAC if it existed in old vrrp instance,
 			 * but not the new one.
@@ -2666,6 +2717,7 @@
 #endif
 
 			/* reset the state */
+			update_vip_pointers(new_vrrp);
 			reset_vrrp_state(vrrp, new_vrrp);
 		}
 	}
--- a/keepalived/vrrp/vrrp_data.c
+++ b/keepalived/vrrp/vrrp_data.c
@@ -178,8 +178,9 @@
 dump_sock(void *sock_data)
 {
 	sock_t *sock = sock_data;
-	log_message(LOG_INFO, "VRRP sockpool: [ifindex(%u), proto(%u), unicast(%d), fd(%d,%d)]"
-			    , sock->ifindex
+	log_message(LOG_INFO, "VRRP sockpool: [recv_ifindex(%u), xmit_ifindex(%u), proto(%u), unicast(%d), fd(%d,%d)]"
+			    , sock->recv_ifindex
+                            , sock->xmit_ifindex
 			    , sock->proto
 			    , sock->unicast
 			    , sock->fd_in
@@ -483,7 +484,7 @@
 
 	if (!LIST_EXISTS(vrrp->vip))
 		vrrp->vip = alloc_list(free_ipaddress, dump_ipaddress);
-	alloc_ipaddress(vrrp->vip, strvec, vrrp->ifp);
+	alloc_ipaddress(vrrp->vip, strvec, vrrp->xmit_ifp);
 }
 void
 alloc_vrrp_evip(vector_t *strvec)
--- a/keepalived/vrrp/vrrp_parser.c
+++ b/keepalived/vrrp/vrrp_parser.c
@@ -257,6 +257,8 @@
 				    , name, vrrp->iname);
 		return;
 	}
+
+        vrrp->xmit_ifp = vrrp->ifp;
 }
 static void
 vrrp_track_int_handler(__attribute__((unused)) vector_t *strvec)
--- a/keepalived/vrrp/vrrp_print.c
+++ b/keepalived/vrrp/vrrp_print.c
@@ -34,6 +34,11 @@
 #include "vrrp_netlink.h"
 #include "rttables.h"
 #include "logger.h"
+#ifdef _HAVE_VRRP_VMAC_
+#include "vrrp_vmac.h"
+#include "vrrp_if.h"
+#include "bitops.h"
+#endif
 
 #include <time.h>
 #include <errno.h>
@@ -249,7 +254,12 @@
 	time_str[sizeof(time_str)-2] = '\0';	/* Remove '\n' char */
 	fprintf(file, "   Last transition = %ld (%s)\n",
 		vrrp->last_transition.tv_sec, time_str);
-	fprintf(file, "   Listening device = %s\n", IF_NAME(vrrp->ifp));
+	if (__test_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags)) {
+		fprintf(file, "   Listening device = %s\n", IF_NAME(IF_BASE_IFP(vrrp->ifp)));
+	} else {
+		fprintf(file, "   Listening device = %s\n", IF_NAME(vrrp->ifp));
+	}
+	fprintf(file, "   Transmitting device = %s\n", IF_NAME(vrrp->xmit_ifp));
 	if (vrrp->dont_track_primary)
 		fprintf(file, "   VRRP interface tracking disabled\n");
 	if (vrrp->skip_check_adv_addr)
--- a/keepalived/vrrp/vrrp_scheduler.c
+++ b/keepalived/vrrp/vrrp_scheduler.c
@@ -446,7 +446,8 @@
 
 /* VRRP dispatcher functions */
 static int
-already_exist_sock(list l, sa_family_t family, int proto, ifindex_t ifindex, bool unicast)
+already_exist_sock(list l, sa_family_t family, int proto, ifindex_t r_ifindex,
+        ifindex_t t_ifindex, bool unicast)
 {
 	sock_t *sock;
 	element e;
@@ -455,7 +456,8 @@
 		sock = ELEMENT_DATA(e);
 		if ((sock->family == family)	&&
 		    (sock->proto == proto)	&&
-		    (sock->ifindex == ifindex)	&&
+		    (sock->recv_ifindex == r_ifindex)	&&
+		    (sock->xmit_ifindex == t_ifindex)	&&
 		    (sock->unicast == unicast))
 			return 1;
 	}
@@ -463,7 +465,8 @@
 }
 
 static void
-alloc_sock(sa_family_t family, list l, int proto, ifindex_t ifindex, bool unicast)
+alloc_sock(sa_family_t family, list l, int proto, ifindex_t ifindex, ifindex_t r_ifindex,
+        ifindex_t x_ifindex, bool unicast)
 {
 	sock_t *new;
 
@@ -471,6 +474,8 @@
 	new->family = family;
 	new->proto = proto;
 	new->ifindex = ifindex;
+        new->recv_ifindex = r_ifindex;
+        new->xmit_ifindex = x_ifindex;
 	new->unicast = unicast;
 
 	list_add(l, new);
@@ -482,7 +487,7 @@
 	vrrp_t *vrrp;
 	list p = vrrp_data->vrrp;
 	element e;
-	ifindex_t ifindex;
+	ifindex_t ifindex, recv_ifindex, xmit_ifindex;
 	int proto;
 	bool unicast;
 
@@ -493,7 +498,18 @@
 			  (__test_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags)) ? IF_BASE_INDEX(vrrp->ifp) :
 #endif
 										    IF_INDEX(vrrp->ifp);
-		unicast = !LIST_ISEMPTY(vrrp->unicast_peer);
+#ifdef _HAVE_VRRP_VMAC_
+		recv_ifindex =
+			(__test_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags)) ?
+			IF_BASE_INDEX(vrrp->ifp) : IF_INDEX(vrrp->ifp);
+		xmit_ifindex =
+			(__test_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags)) ?
+			vrrp->vmac_ifindex : recv_ifindex;
+#else
+		recv_ifindex = ifindex;
+		xmit_ifindex = ifindex;
+#endif
+                unicast = !LIST_ISEMPTY(vrrp->unicast_peer);
 #if defined _WITH_VRRP_AUTH_
 		if (vrrp->version == VRRP_VERSION_2 && vrrp->auth_type == VRRP_AUTH_AH)
 			proto = IPPROTO_IPSEC_AH;
@@ -502,8 +518,8 @@
 			proto = IPPROTO_VRRP;
 
 		/* add the vrrp element if not exist */
-		if (!already_exist_sock(l, vrrp->family, proto, ifindex, unicast))
-			alloc_sock(vrrp->family, l, proto, ifindex, unicast);
+		if (!already_exist_sock(l, vrrp->family, proto, recv_ifindex, xmit_ifindex, unicast))
+			alloc_sock(vrrp->family, l, proto, ifindex, recv_ifindex, xmit_ifindex, unicast);
 	}
 }
 
@@ -516,12 +532,12 @@
 	for (e = LIST_HEAD(l); e; ELEMENT_NEXT(e)) {
 		sock = ELEMENT_DATA(e);
 		sock->fd_in = open_vrrp_read_socket(sock->family, sock->proto,
-					       sock->ifindex, sock->unicast);
+					       sock->recv_ifindex, sock->unicast);
 		if (sock->fd_in == -1)
 			sock->fd_out = -1;
 		else
 			sock->fd_out = open_vrrp_send_socket(sock->family, sock->proto,
-							     sock->ifindex, sock->unicast);
+							     sock->xmit_ifindex, sock->unicast);
 	}
 }
 
@@ -534,7 +550,7 @@
 	element e_sock;
 	element e_vrrp;
 	int proto;
-	ifindex_t ifindex;
+	ifindex_t ifindex, recv_ifindex, xmit_ifindex;
 	bool unicast;
 
 	for (e_sock = LIST_HEAD(l); e_sock; ELEMENT_NEXT(e_sock)) {
@@ -546,6 +562,17 @@
 				  (__test_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags)) ? IF_BASE_INDEX(vrrp->ifp) :
 #endif
 											    IF_INDEX(vrrp->ifp);
+#ifdef _HAVE_VRRP_VMAC_
+			recv_ifindex =
+				(__test_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags)) ?
+				IF_BASE_INDEX(vrrp->ifp) : IF_INDEX(vrrp->ifp);
+			xmit_ifindex =
+				(__test_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags)) ?
+				vrrp->vmac_ifindex : recv_ifindex;
+#else
+			recv_ifindex = ifindex;
+			xmit_ifindex = ifindex;
+#endif
 			unicast = !LIST_ISEMPTY(vrrp->unicast_peer);
 #if defined _WITH_VRRP_AUTH_
 			if (vrrp->version == VRRP_VERSION_2 && vrrp->auth_type == VRRP_AUTH_AH)
@@ -554,7 +581,8 @@
 #endif
 				proto = IPPROTO_VRRP;
 
-			if ((sock->ifindex == ifindex)	&&
+			if ((sock->recv_ifindex == recv_ifindex)	&&
+			    (sock->xmit_ifindex == xmit_ifindex) &&
 			    (sock->family == vrrp->family) &&
 			    (sock->proto == proto)	&&
 			    (sock->unicast == unicast)) {
--- a/keepalived/vrrp/vrrp_vmac.c
+++ b/keepalived/vrrp/vrrp_vmac.c
@@ -57,7 +57,7 @@
 	l3_addr->s6_addr[15] = ll_addr[5];
 }
 
-static int
+int
 netlink_link_up(vrrp_t *vrrp)
 {
 	int status = 1;
@@ -73,7 +73,7 @@
 	req.n.nlmsg_flags = NLM_F_REQUEST;
 	req.n.nlmsg_type = RTM_NEWLINK;
 	req.ifi.ifi_family = AF_UNSPEC;
-	req.ifi.ifi_index = (int)IF_INDEX(vrrp->ifp);
+	req.ifi.ifi_index = (int)vrrp->vmac_ifindex;
 	req.ifi.ifi_change |= IFF_UP;
 	req.ifi.ifi_flags |= IFF_UP;
 
@@ -84,6 +84,32 @@
 }
 
 int
+netlink_link_down(vrrp_t *vrrp)
+{
+   int status = 1;
+   struct {
+       struct nlmsghdr n;
+       struct ifinfomsg ifi;
+       char buf[256];
+   } req;
+
+   memset(&req, 0, sizeof (req));
+
+   req.n.nlmsg_len = NLMSG_LENGTH(sizeof (struct ifinfomsg));
+   req.n.nlmsg_flags = NLM_F_REQUEST;
+   req.n.nlmsg_type = RTM_NEWLINK;
+   req.ifi.ifi_family = AF_UNSPEC;
+   req.ifi.ifi_index = vrrp->vmac_ifindex;
+   req.ifi.ifi_change |= IFF_UP;
+   req.ifi.ifi_flags &= ~IFF_UP;
+
+   if (netlink_talk(&nl_cmd, &req.n) < 0)
+       status = -1;
+
+   return status;
+}
+
+int
 netlink_link_add_vmac(vrrp_t *vrrp)
 {
 	struct rtattr *linkinfo;
@@ -187,10 +213,10 @@
 	base_ifp = vrrp->ifp;
 	base_ifindex = vrrp->ifp->ifindex;
 	ifp->flags = vrrp->ifp->flags; /* Copy base interface flags */
-	vrrp->ifp = ifp;
-	vrrp->ifp->base_ifindex = base_ifindex;
-	vrrp->ifp->vmac = 1;
-	vrrp->vmac_ifindex = IF_INDEX(vrrp->ifp); /* For use on delete */
+	vrrp->xmit_ifp = ifp;
+	vrrp->xmit_ifp->base_ifindex = base_ifindex;
+	vrrp->xmit_ifp->vmac = 1;
+	vrrp->vmac_ifindex = IF_INDEX(ifp); /* For use on delete */
 
 	if (vrrp->family == AF_INET) {
 		/* Set the necessary kernel parameters to make macvlans work for us */
