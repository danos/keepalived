Refactor/Add carrier is up interface check patch

Checking for IFF_UP and IFF_RUNNING isn't enough to determine if
packets can be sent, some interface types also have a carrier protocol
that must be up before packets can be sent or received.

Relying on IFF_UP and IFF_RUNNING can cause a dual master on these
interfaces, IFF_LOWER_UP and checking IFLA_CARRIER in the RTM_NEWLINK
message allows us to wait for these interfaces to come up fully. This
can stop the need for delaying start up checking these variables means
we know when an interface is up and can send/receive.

Updated how interface flags are updated so the calculation on if a
change in state has happened includes the IFLA_CARRIER status. This
is helpful for VLAN interfaces where if the lower interface is down the
VRRP group stays up.

---
 keepalived/core/keepalived_netlink.c |   30 +++++++++++++++++++++++-------
 keepalived/include/vrrp_if.h         |    9 +++++++--
 keepalived/vrrp/vrrp_if.c            |    3 ++-
 3 files changed, 32 insertions(+), 10 deletions(-)

--- a/keepalived/core/keepalived_netlink.c
+++ b/keepalived/core/keepalived_netlink.c
@@ -1582,11 +1582,11 @@ process_if_status_change(interface_t *if
 }
 
 static void
-update_interface_flags(interface_t *ifp, unsigned ifi_flags)
+update_interface_flags(interface_t *ifp, unsigned ifi_flags, unsigned carrier_up)
 {
 	bool was_up, now_up;
 
-	if (ifi_flags == ifp->ifi_flags)
+	if (ifi_flags == ifp->ifi_flags && carrier_up == ifp->carrier_is_up)
 		return;
 
 	if (!vrrp_data)
@@ -1596,8 +1596,9 @@ update_interface_flags(interface_t *ifp,
 
 	/* For an interface to be really up, any underlying interface must also be up */
 	was_up = IF_FLAGS_UP(ifp);
-	now_up = FLAGS_UP(ifi_flags);
+	now_up = FLAGS_UP(ifi_flags) && carrier_up;
 	ifp->ifi_flags = ifi_flags;
+	ifp->carrier_is_up = carrier_up;
 
 	if (was_up == now_up)
 		return;
@@ -1740,6 +1741,12 @@ netlink_if_link_populate(interface_t *if
 	ifp->base_netns_id = -1;
 #endif
 
+	if (tb[IFLA_CARRIER]) {
+		ifp->carrier_is_up = *(uint32_t *)RTA_DATA(tb[IFLA_CARRIER]);
+	} else {
+		// Flag not in message default to 1 (true)
+		ifp->carrier_is_up = 1;
+	}
 #ifdef _HAVE_VRRP_VMAC_
 	if (tb[IFLA_LINKINFO]) {
 		parse_rtattr_nested(linkinfo, IFLA_INFO_MAX, tb[IFLA_LINKINFO]);
@@ -1892,6 +1899,7 @@ netlink_if_link_filter(__attribute__((un
 	interface_t *ifp;
 	size_t len;
 	char *name;
+	uint32_t carrier_up;
 
 	ifi = NLMSG_DATA(h);
 
@@ -1909,6 +1917,10 @@ netlink_if_link_filter(__attribute__((un
 		return -1;
 	name = (char *)RTA_DATA(tb[IFLA_IFNAME]);
 
+	if (tb[IFLA_CARRIER] == NULL)
+		return -1;
+	carrier_up = *(uint32_t *)RTA_DATA(tb[IFLA_CARRIER]);
+
 	/* Skip it if already exists */
 	ifp = if_get_by_ifname(name, IF_CREATE_NETLINK);
 
@@ -1921,7 +1933,7 @@ netlink_if_link_filter(__attribute__((un
 		&& IF_INDEX(ifp) == IF_BASE_INDEX(ifp)
 #endif
 	)
-		update_interface_flags(ifp, ifi->ifi_flags);
+		update_interface_flags(ifp, ifi->ifi_flags, carrier_up);
 
 	return 0;
 }
@@ -1986,6 +1998,7 @@ netlink_link_filter(__attribute__((unuse
 	list_head_t sav_tracking_vrrp;
 	list_head_t sav_e_list;
 	garp_delay_t *sav_garp_delay;
+	uint32_t carrier_up = 1;
 
 	if (!(h->nlmsg_type == RTM_NEWLINK || h->nlmsg_type == RTM_DELLINK))
 		return 0;
@@ -2025,6 +2038,7 @@ netlink_link_filter(__attribute__((unuse
 			} else
 #endif
 				cleanup_lost_interface(ifp);
+				ifp->carrier_is_up = 0;
 
 #ifdef _HAVE_VRRP_VMAC_
 			/* If this was a vmac we created, create it again, so long as the underlying i/f exists */
@@ -2085,6 +2099,9 @@ netlink_link_filter(__attribute__((unuse
 				}
 			}
 
+			if (tb[IFLA_CARRIER])
+				carrier_up = *(uint32_t *)RTA_DATA(tb[IFLA_CARRIER]);
+
 			if (strcmp(ifp->ifname, name)) {
 				/* The name can change, so handle that here */
 				log_message(LOG_INFO, "Interface name has changed from %s to %s", ifp->ifname, name);
@@ -2197,7 +2214,7 @@ netlink_link_filter(__attribute__((unuse
 					alloc_vrrp_buffer(ifp->mtu);
 
 			/* We need to see a transition to up, so mark it down for now */
-			ifp->ifi_flags &= ~(IFF_UP | IFF_RUNNING);
+			ifp->ifi_flags &= ~(IFF_UP | IFF_RUNNING | IFF_LOWER_UP);
 		} else {
 			if (__test_bit(LOG_DETAIL_BIT, &debug))
 				log_message(LOG_INFO, "Unknown interface %s deleted", (char *)tb[IFLA_IFNAME]);
@@ -2209,8 +2226,7 @@ netlink_link_filter(__attribute__((unuse
 #ifdef _HAVE_VRRP_VMAC_
 	if (IF_INDEX(ifp) == IF_BASE_INDEX(ifp))
 #endif
-	update_interface_flags(ifp, (h->nlmsg_type == RTM_DELLINK) ? 0 : ifi->ifi_flags);
-
+	update_interface_flags(ifp, (h->nlmsg_type == RTM_DELLINK) ? 0 : ifi->ifi_flags, (h->nlmsg_type == RTM_DELLINK) ? 0 : carrier_up);
 	return 0;
 }
 
--- a/keepalived/include/vrrp_if.h
+++ b/keepalived/include/vrrp_if.h
@@ -35,8 +35,12 @@
 #include <stdio.h>
 #ifdef _HAVE_NET_LINUX_IF_H_COLLISION_
 #define _LINUX_IF_H
+// Explicit define of IFF_LOWER_UP if we're ignoring _LINUX_IF_H_
+#define IFF_LOWER_UP  1<<16
 #endif
 #include <linux/netdevice.h>
+/* Need expanded IFF_ values for IFF_LOWER_UP */
+#include <linux/if.h>
 #ifdef _HAVE_VRRP_VMAC_
 #include <linux/if_link.h>
 #endif
@@ -171,6 +175,7 @@ typedef struct _interface {
 	bool			gna_router;		/* Router flag for NA messages */
 	bool			promote_secondaries;	/* Original value of promote_secondaries to be restored */
 	uint32_t		reset_promote_secondaries; /* Count of how many vrrps have changed promote_secondaries on interface */
+	bool			carrier_is_up;		/* Carrier for interface is up (useful for bonded interfaces) */
 	list_head_t		tracking_vrrp;		/* tracking_obj_t - vrrp instances tracking this interface */
 
 	/* linked list member */
@@ -204,8 +209,8 @@ typedef struct _tracked_if {
 #define IF_MII_SUPPORTED(X) ((X)->lb_type & LB_MII)
 #define IF_ETHTOOL_SUPPORTED(X) ((X)->lb_type & LB_ETHTOOL)
 #endif
-#define FLAGS_UP(X) (((X) & (IFF_UP | IFF_RUNNING)) == (IFF_UP | IFF_RUNNING))
-#define IF_FLAGS_UP(X) (FLAGS_UP((X)->ifi_flags))
+#define FLAGS_UP(X) (((X) & (IFF_UP | IFF_RUNNING | IFF_LOWER_UP)) == (IFF_UP | IFF_RUNNING | IFF_LOWER_UP))
+#define IF_FLAGS_UP(X) (FLAGS_UP((X)->ifi_flags) && (X)->carrier_is_up)
 #ifdef _HAVE_VRRP_VMAC_
 extern bool interface_is_up(interface_t *);
 #define IF_ISUP(X) (interface_is_up(X))
--- a/keepalived/vrrp/vrrp_if.c
+++ b/keepalived/vrrp/vrrp_if.c
@@ -565,7 +565,8 @@ dump_if(FILE *fp, const interface_t *ifp
 		conf_write(fp, "   MAC broadcast = %s", mac_buf);
 	}
 
-	conf_write(fp, "   State = %sUP, %sRUNNING%s%s%s%s%s%s", ifp->ifi_flags & IFF_UP ? "" : "not ", ifp->ifi_flags & IFF_RUNNING ? "" : "not ",
+	conf_write(fp, "   State = %sUP, %sRUNNING, LOWER %sUP%s%s%s%s%s%s", ifp->ifi_flags & IFF_UP ? "" : "not ", ifp->ifi_flags & IFF_RUNNING ? "" : "not ",
+			((ifp->ifi_flags & IFF_LOWER_UP) && ifp->carrier_is_up) ? "" : "not ",
 			!(ifp->ifi_flags & IFF_BROADCAST) ? ", no broadcast" : "",
 			ifp->ifi_flags & IFF_LOOPBACK ? ", loopback" : "",
 			ifp->ifi_flags & IFF_POINTOPOINT ? ", point to point" : "",
