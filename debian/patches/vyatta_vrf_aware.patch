Add VRF VMAC awareness

Vyatta specific change.
Added config option on a per-group basis to allow VRRP VMAC interfaces to be
created in either the base interface's VRF or in the default global interface

---
 keepalived/include/vrrp.h     |    3 +++
 keepalived/vrrp/vrrp.c        |   22 ++++++++++++++++++++++
 keepalived/vrrp/vrrp_data.c   |    3 +++
 keepalived/vrrp/vrrp_parser.c |   12 ++++++++++++
 keepalived/vrrp/vrrp_vmac.c   |    2 +-
 5 files changed, 41 insertions(+), 1 deletion(-)

--- a/keepalived/vrrp/vrrp_vmac.c
+++ b/keepalived/vrrp/vrrp_vmac.c
@@ -334,7 +334,7 @@ netlink_link_add_vmac(vrrp_t *vrrp)
 #ifdef _HAVE_VRF_
 		/* If the underlying interface is enslaved to a VRF master, then this
 		 * interface should be as well. */
-		if (vrrp->configured_ifp->vrf_master_ifp)
+		if (vrrp->vrf_aware && (__test_bit(VRRP_VMAC_BIT, &vrrp->vmac_flags) && IF_BASE_IFP(vrrp->ifp)->vrf_master_ifp))
 			addattr32(&req.n, sizeof(req), IFLA_MASTER, vrrp->configured_ifp->vrf_master_ifp->ifindex);
 #endif
 
--- a/keepalived/include/vrrp.h
+++ b/keepalived/include/vrrp.h
@@ -231,6 +231,9 @@ typedef struct _vrrp_t {
 	int			ipvlan_type;		/* Bridge, private or VEPA mode */
 #endif
 	interface_t		*configured_ifp;	/* Interface the configuration says we are on */
+#ifdef _HAVE_VRF_
+	bool 			vrf_aware; 			/* Create VMAC interface in the base interface VRF or the Global VRF*/
+#endif
 #endif
 	list_head_t		track_ifp;		/* tracked_if_t - Interface state we monitor */
 	list_head_t		track_script;		/* tracked_sc_t - Script state we monitor */
--- a/keepalived/vrrp/vrrp.c
+++ b/keepalived/vrrp/vrrp.c
@@ -3141,6 +3141,14 @@ vrrp_complete_instance(vrrp_t * vrrp)
 							, vrrp->iname);
 		vrrp->num_script_if_fault++;	/* Stop the vrrp instance running */
 	}
+#ifdef _HAVE_VRF_
+	if (vrrp->vrf_aware == PARAMETER_UNSET)
+		vrrp->vrf_aware = false;
+	if((!__test_bit(VRRP_VMAC_BIT, &vrrp->vmac_flags)) && vrrp->vrf_aware) {
+		log_message(LOG_INFO, "VRRP_Instance(%s) is VRF aware but not using an RFC interface, discarding VRF aware");
+		vrrp->vrf_aware = false;
+	}
+#endif
 #endif
 
 	/* If the interface doesn't support multicast, then we need to use unicast */
@@ -3478,6 +3486,20 @@ vrrp_complete_instance(vrrp_t * vrrp)
 									, vrrp->iname
 									, vrrp->vmac_ifname
 									, ifp->ifname, ifp->ifname);
+				} else if (vrrp->vmac_ifname[0] &&
+					    !strcmp(vrrp->vmac_ifname, ifp->ifname)) {
+					if (reload && ifp->is_ours) {
+						list_for_each_entry(old_vrrp, &old_vrrp_data->vrrp, e_list) {
+							if (!strncmp(vrrp->iname, old_vrrp->iname, strlen(vrrp->iname)) && old_vrrp->vrf_aware != vrrp->vrf_aware) {
+								log_message(LOG_INFO,
+									"(%s) Deleting old VMAC interface %s, to be recreated in new VRF later",
+									vrrp->iname, ifp->ifname);
+								netlink_link_del_vmac(old_vrrp);
+								old_vmac_deleted = true;
+								break;
+							}
+						}
+					}
 				}
 
 				if (!old_vmac_deleted) {
--- a/keepalived/vrrp/vrrp_data.c
+++ b/keepalived/vrrp/vrrp_data.c
@@ -697,6 +697,9 @@ dump_vrrp(FILE *fp, const vrrp_t *vrrp)
 #ifdef _HAVE_VRRP_VMAC_
 	if (vrrp->ifp && vrrp->configured_ifp && vrrp->configured_ifp != vrrp->ifp->base_ifp && vrrp->ifp->is_ours)
 		conf_write(fp, "   Configured interface = %s", vrrp->configured_ifp->ifname);
+#ifdef _HAVE_VRF_
+	conf_write(fp, "   VRF aware for VMAC interfaces = %s", (vrrp->vrf_aware? "Yes" : "No"));
+#endif
 #endif
 	if (vrrp->dont_track_primary)
 		conf_write(fp, "   VRRP interface tracking disabled");
--- a/keepalived/vrrp/vrrp_parser.c
+++ b/keepalived/vrrp/vrrp_parser.c
@@ -523,6 +523,15 @@ vrrp_vmac_xmit_base_handler(__attribute_
 
 	__set_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags);
 }
+#ifdef _HAVE_VRF_
+static void
+vrrp_vmac_vrf_aware_handler(__attribute__((unused)) const vector_t *strvec)
+{
+	vrrp_t *vrrp = list_last_entry(&vrrp_data->vrrp, vrrp_t, e_list);
+
+	vrrp->vrf_aware = true;
+}
+#endif
 #endif
 #ifdef _HAVE_VRRP_IPVLAN_
 static void
@@ -1915,6 +1924,9 @@ init_vrrp_keywords(bool active)
 	install_keyword("use_vmac", &vrrp_vmac_handler);
 	install_keyword("use_vmac_addr", &vrrp_vmac_addr_handler);
 	install_keyword("vmac_xmit_base", &vrrp_vmac_xmit_base_handler);
+#ifdef _HAVE_VRF_
+	install_keyword("vrf_aware", &vrrp_vmac_vrf_aware_handler);
+#endif
 #endif
 #ifdef _HAVE_VRRP_IPVLAN_
 	install_keyword("use_ipvlan", &vrrp_ipvlan_handler);
