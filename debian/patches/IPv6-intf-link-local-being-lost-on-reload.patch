---
 keepalived/include/vrrp.h      |    2 +-
 keepalived/vrrp/vrrp.c         |   12 ++++++++----
 keepalived/vrrp/vrrp_daemon.c  |   35 +++++++++++++++++++++++++++++++++++
 keepalived/vrrp/vrrp_netlink.c |   17 +++++++----------
 4 files changed, 51 insertions(+), 15 deletions(-)

--- a/keepalived/include/vrrp.h
+++ b/keepalived/include/vrrp.h
@@ -360,5 +360,5 @@
 extern void vrrp_update_saddr(vrrp_t *);
 extern void vrrp_scan_groups_to_update_saddr(sa_family_t);
 extern int vrrp_handle_ipv6_linklocal(vrrp_t *, int);
-
+extern bool vrrp_check_vip_is_src_addr(ip_address_t *, struct sockaddr_storage *);
 #endif
--- a/keepalived/vrrp/vrrp.c
+++ b/keepalived/vrrp/vrrp.c
@@ -1302,8 +1302,9 @@
 
 	for (ifa = global_data->local_addresses; ifa != NULL; ifa = ifa->ifa_next) {
 		if (ifa->ifa_addr == NULL ||
-				ifa->ifa_addr->sa_family != AF_INET ||
-				strncmp(if_name, ifa->ifa_name, IF_NAMESIZE) != 0)
+				ifa->ifa_addr->sa_family != AF_INET6 ||
+				strncmp(if_name, ifa->ifa_name, IF_NAMESIZE) != 0 ||
+				IN6_IS_ADDR_LINKLOCAL(&(((struct sockaddr_in6 *)ifa->ifa_addr)->sin6_addr)))
 			continue;
 		if(inet_inaddrcmp(vip->ifa.ifa_family,
 						&(vip->u.sin6_addr),
@@ -1316,7 +1317,7 @@
 	return match;
 }
 
-static bool
+bool
 vrrp_check_vip_is_src_addr(ip_address_t *vip, struct sockaddr_storage *saddr)
 {
 	bool match = false;
@@ -1348,14 +1349,17 @@
 	was_owner = vrrp->addr_owner;
 
 	vrrp->addr_owner = false;
+	log_message(LOG_INFO, "Checking VIPs for %s (%s)", IF_NAME(vrrp->xmit_ifp), IF_NAME(IF_BASE_IFP(vrrp->xmit_ifp)));
 	for (e = LIST_HEAD(vrrp->vip); e; ELEMENT_NEXT(e)) {
 		vip = ELEMENT_DATA(e);
 		if (vrrp_check_vip_is_src_addr(vip, &vrrp->saddr) ||
-				vrrp_check_ipv6_globals_for_ipao(vip, IF_NAME(IF_BASE_IFP(vrrp->ifp)))) {
+				((__test_bit(VRRP_VMAC_XMITBASE_BIT, &vrrp->vmac_flags)) &&
+					vrrp_check_ipv6_globals_for_ipao(vip, IF_NAME(IF_BASE_IFP(vrrp->xmit_ifp))))) {
 			vrrp->addr_owner = true;
 			break;
 		}
 	}
+	log_message(LOG_INFO, "%s is address owner? %s", vrrp->iname, vrrp->addr_owner?"yes":"no");
 
 	if (was_owner != vrrp->addr_owner) {
 		/*
--- a/keepalived/vrrp/vrrp_daemon.c
+++ b/keepalived/vrrp/vrrp_daemon.c
@@ -370,6 +370,40 @@
 }
 #endif
 
+/*
+ * On occasion IPv6 VIP addresses can get added to the interface_t structure
+ * as if they are the source address to send the packet from. When keepalived reloads
+ * it removes this source address and then tries to readd it as if it is the link-local
+ * address on the interface. This creates problems with checking if the interface is up
+ * when we try to move to MASTER state instead moving to FAULT state.
+ * To get round this we delete all the VIPs as we reload, unless the VIP is an IPAO we don't
+ * delete those addresses.
+ */
+static void
+vrrp_delete_all_vips(){
+    element e, e2;
+    vrrp_t *vrrp;
+	ip_address_t *vip;
+
+    if (!vrrp_data)
+        return;
+
+    for (e = LIST_HEAD(vrrp_data->vrrp); e; ELEMENT_NEXT(e)) {
+        vrrp = ELEMENT_DATA(e);
+		if (!vrrp->addr_owner)
+			netlink_iplist(vrrp->vip, IPADDRESS_DEL);
+		else {
+			for (e2 = LIST_HEAD(vrrp->vip); e2; ELEMENT_NEXT(e2)) {
+				vip = ELEMENT_DATA(e2);
+				if (!vrrp_check_vip_is_src_addr(vip, &vrrp->saddr)) {
+					netlink_ipaddress(vip, IPADDRESS_DEL);
+				}
+			}
+		}
+    }
+    return;
+}
+
 /* Reload thread */
 static int
 reload_vrrp_thread(__attribute__((unused)) thread_t * thread)
@@ -382,6 +416,7 @@
 #ifdef _HAVE_VRRP_VMAC_
         vrrp_delete_all_vmac_interfaces();
 #endif
+	vrrp_delete_all_vips();
 	kernel_netlink_close();
 	thread_cleanup_master(master);
 #ifdef _WITH_LVS_
--- a/keepalived/vrrp/vrrp_netlink.c
+++ b/keepalived/vrrp/vrrp_netlink.c
@@ -503,7 +503,6 @@
 			 * address, so remember it.
 			 */
 			ifp->sin_addr = *(struct in_addr *) addr;
-			vrrp_scan_groups_to_update_saddr(AF_INET);
 		} else {
 			if (in_addr_eq(&ifp->sin_addr, (struct in_addr *) addr) &&
 				(h->nlmsg_type == RTM_DELADDR)) {
@@ -514,29 +513,23 @@
 				 * hear about it shortly.
 				 */
 				memset(&ifp->sin_addr, 0, sizeof(struct in_addr));
-				vrrp_scan_groups_to_update_saddr(AF_INET);
 			}
 		}
 	} else {
-		struct sockaddr_storage ipv6_sock_addr;
-
-		if (!ifp->sin6_addr.s6_addr16[0] &&
+		if (IN6_IS_ADDR_UNSPECIFIED(&(ifp->sin6_addr)) &&
 				ifa->ifa_scope == RT_SCOPE_LINK &&
 				h->nlmsg_type == RTM_NEWADDR &&
 				ifa->ifa_prefixlen == 64) {
+
 			ifp->sin6_addr = *(struct in6_addr *) addr;
-			inet_ip6tosockaddr(&ifp->sin6_addr, &ipv6_sock_addr);
-			vrrp_scan_groups_to_update_saddr(AF_INET6);
 		} else {
-			if (IN6_ARE_ADDR_EQUAL(&ifp->sin6_addr, (struct in6_addr *)addr) &&
+			if (IN6_ARE_ADDR_EQUAL(&(ifp->sin6_addr), (struct in6_addr *)&addr) &&
 					(h->nlmsg_type == RTM_DELADDR)) {
 				/*
 				 * The interface's link-local IPv6 address has
 				 * been deleted, so forget it.
 				 */
-				inet_ip6tosockaddr((struct in6_addr *)addr, &ipv6_sock_addr);
 				memset(&ifp->sin6_addr, 0, sizeof(struct in6_addr));
-				vrrp_scan_groups_to_update_saddr(AF_INET6);
 			}
 		}
 	}
@@ -555,6 +548,10 @@
 			log_message(LOG_ERR, "Failed to allocate getifaddrs, %d", errno);
 		}
 	}
+	if (ifa->ifa_family == AF_INET)
+		vrrp_scan_groups_to_update_saddr(AF_INET);
+	else if (ifa->ifa_family == AF_INET6)
+		vrrp_scan_groups_to_update_saddr(AF_INET6);
 	return 0;
 }
 
